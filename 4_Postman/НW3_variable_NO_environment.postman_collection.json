{
	"info": {
		"_postman_id": "61d855f3-c012-49d5-8b2c-32be17502fe4",
		"name": "НW3_variable_NO_environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// необходимо залогиниться",
							"// POST",
							"// http://162.55.220.72:5005/login",
							"// login : str (кроме /)",
							"// password : str",
							"",
							"// Приходящий токен необходимо передать во все остальные запросы.",
							"var token = pm.response.json().token;",
							"console.log(\"token = \", token);",
							"pm.environment.set(\"auth_token\", token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "avokadoflake",
							"type": "text"
						},
						{
							"key": "password",
							"value": "avokadoflake1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info",
							"// req. (RAW JSON)",
							"// POST",
							"// age: int",
							"// salary: int",
							"// name: str",
							"// auth_token",
							"",
							"// resp.",
							"// {'start_qa_salary': salary,",
							"//  'qa_salary_after_6_months': salary * 2,",
							"//  'qa_salary_after_12_months': salary * 2.9,",
							"//  'person': {'u_name':[user_name, salary, age],",
							"//                                 'u_age': age,",
							"//                                 'u_salary_1.5_year': salary * 4}",
							"//                                 }",
							"",
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"1. Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"start_qa_salary\",",
							"        \"qa_salary_after_6_months\",",
							"        \"qa_salary_after_12_months\",",
							"        \"person\"",
							"    ],",
							"    \"properties\": {",
							"        \"start_qa_salary\": {",
							"            \"type\": \"number\",",
							"            \"example\": [1000]",
							"        },",
							"        \"qa_salary_after_6_months\": {",
							"            \"type\": \"number\",",
							"            \"example\": [2000]",
							"        },",
							"        \"qa_salary_after_12_months\": {",
							"            \"type\": \"number\",",
							"            \"examples\": [2900.0]",
							"        },",
							"        \"person\": {",
							"            \"type\": \"object\",",
							"            \"examples\": [",
							"                {",
							"                    \"u_age\": 25,",
							"                    \"u_name\": [\"Olesa\", 1000, 25],",
							"                    \"u_salary_1_5_year\": 4000",
							"                }",
							"            ],",
							"            \"required\": [",
							"                \"u_age\",",
							"                \"u_name\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"properties\": {",
							"                \"u_age\": {",
							"                    \"type\": \"integer\",",
							"                    \"examples\": [25]",
							"                },",
							"                \"u_name\": {",
							"                    \"type\": \"array\",",
							"                    \"examples\": [",
							"                        [\"Olesa\", 1000, 25]",
							"                    ],",
							"                    \"additionalItems\": true,",
							"                    \"items\": {",
							"                        \"anyOf\": [",
							"                            {",
							"                                \"type\": \"string\",",
							"                                \"examples\": [\"Olesa\"]",
							"                            },",
							"                            {",
							"                                \"type\": \"number\",",
							"                                \"examples\": [1000]",
							"                            },",
							"                                                        {",
							"                                \"type\": \"number\",",
							"                                \"examples\": [25]",
							"                            }",
							"                        ]",
							"                    }",
							"                },",
							"                \"u_salary_1_5_year\": {",
							"                    \"type\": \"number\",",
							"                    \"examples\": [4000]",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"// pm.test('2. Schema is valid', function () {",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"// });",
							"",
							"// var jsonData = JSON.parse(responseBody);",
							"pm.test(\"2. Response body is valid\", function() {",
							"    pm.expect(tv4.validate(jsonData, schema, true, true), tv4.error).to.be.true;",
							"});",
							"",
							"console.log(\"Errors: \", tv4.error);  // ошибку в консоль",
							"",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var salary_req = JSON.parse(request.data).salary;",
							"var resp_body = pm.response.json();",
							"console.log(\"salary_req = \", salary_req);",
							"console.log(\"resp_body =\", resp_body);",
							"",
							"pm.test('3.1. Correct salary coeffitient: start_qa_salary = salary', function() {",
							"       pm.expect(parseInt(resp_body.start_qa_salary)).to.eql(parseInt(salary_req)); ",
							"});",
							"",
							"pm.test('3.2. Correct salary coeffitient: qa_salary_after_6_months = salary * 2', function() {",
							"       pm.expect(parseInt(resp_body.qa_salary_after_6_months)).to.eql(parseInt(salary_req)*2); ",
							"});",
							"",
							"pm.test('3.3. Correct salary coeffitient: qa_salary_after_12_months = salary * 2.9', function() {",
							"       pm.expect(resp_body.qa_salary_after_12_months).to.eql(salary_req * 2.9); ",
							"});",
							"",
							"pm.test('3.4. Correct salary coeffitient: u_salary_1_5_year = salary * 4', function() {",
							"       pm.expect(parseFloat(resp_body.person.u_salary_1_5_year)).to.eql(parseFloat(salary_req)*4); ",
							"});",
							"",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
							"",
							"u_salary_1_5_year = resp_body.person.u_salary_1_5_year",
							"console.log(\"u_salary_1_5_year\", u_salary_1_5_year)",
							"pm.environment.set(\"u_salary_1_5_year\", u_salary_1_5_year)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 24,\n    \"salary\": 1000,\n    \"name\": \"Olesa\",\n    \"auth_token\": \"{{auth_token}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/new_data",
							"// req.",
							"// POST",
							"// age: int",
							"// salary: int",
							"// name: str",
							"// auth_token",
							"",
							"// Resp.",
							"// {'name':name,",
							"//   'age': int(age),",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}",
							"",
							"// Тесты:",
							"// console.log(\"token: \", auth_token)",
							"// 1) Статус код 200",
							"pm.test(\"1. Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"name\",",
							"        \"age\",",
							"        \"salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"example\": [\"Olesa\"]",
							"            },",
							"        \"age\": {",
							"            \"type\": \"integer\",",
							"            \"example\": [25]",
							"            },",
							"        \"salary\": {",
							"            \"type\": \"array\",",
							"            \"example\": [1000, 2000, 3000]",
							"            },",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"anyOf\": [",
							"                    {",
							"                    \"type\": \"number\",",
							"                    \"example\": [1000]",
							"                    },",
							"                    {",
							"                    \"type\": \"number\",",
							"                    \"example\": [2000]",
							"                    },",
							"                    {",
							"                    \"type\": \"number\",",
							"                    \"example\": [3000]",
							"                    },",
							"                ]",
							"            }",
							"        },",
							"    \"additionalProperties\": true",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"",
							"// pm.test(\"2. Schema correct.\", function() {",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"// });",
							"",
							"// var jsonData = JSON.parse(responseBody);",
							"pm.test(\"2. Response body is valid\", function() {",
							"    pm.expect(tv4.validate(jsonData, schema, true, true), tv4.error).to.be.true;",
							"});",
							"",
							"console.log(\"Errors: \", tv4.error);",
							"",
							"var salary_res = pm.response.json().salary;",
							"console.log(salary_res)",
							"var salary_req = request.data.salary;",
							"console.log(salary_req)",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"pm.test(\"3.1. Correct salarys: salary[0] = salary\", function() {",
							"    pm.expect(parseInt(salary_res[0])).to.eql(parseInt(salary_req));",
							"});",
							"",
							"pm.test(\"3.2. Correct salarys: salary[1] = salary * 2\", function() {",
							"    pm.expect(parseInt(salary_res[1])).to.eql(parseInt(salary_req * 2));",
							"});",
							"",
							"pm.test(\"3.3. Correct salarys: salary[2] = salary * 3\", function() {",
							"    pm.expect(parseInt(salary_res[2])).to.eql(parseInt(salary_req * 3));",
							"});",
							"",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"pm.test(\"4.1. Correct salarys: salary[2] > salary[0]\", function() {           // above",
							"    // pm.expect(parseInt(salary_res[2]) > parseInt(salary_res[0])).to.be.true;",
							"    pm.expect(parseInt(salary_res[2])).to.above(parseInt(salary_res[0]));",
							"});",
							"",
							"pm.test(\"4.2. Correct salarys: salary[2] > salary[1]\", function() {           // above",
							"    // pm.expect(parseInt(salary_res[2]) > parseInt(salary_res[1])).to.be.true;",
							"    pm.expect(parseInt(salary_res[2])).to.above(parseInt(salary_res[1]));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olesa",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/test_pet_info",
							"// req.",
							"// POST",
							"// age: int",
							"// weight: int",
							"// name: str",
							"// auth_token",
							"",
							"// Resp.",
							"// {'name': name,",
							"//  'age': age,",
							"//  'daily_food':weight * 0.012,",
							"//  'daily_sleep': weight * 2.5}",
							"",
							"",
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"1. Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"name\",",
							"        \"age\",",
							"        \"daily_food\",",
							"        \"daily_sleep\"",
							"    ],",
							"    \"properties\": {",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"example\": [\"Olesa\"]",
							"        },",
							"        \"age\": {",
							"            \"type\": \"integer\",",
							"            \"example\": [25]",
							"        },",
							"        \"daily_food\": {",
							"            \"type\": \"number\",",
							"            \"example\": [0.48]",
							"        },",
							"        \"daily_sleep\": {",
							"            \"type\": \"number\",",
							"            \"example\": [100.0]",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"// pm.test(\"2. Schema is correct\", function() {",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"// });",
							"",
							"// var jsonData = JSON.parse(responseBody);",
							"pm.test(\"2. Response body is valid\", function() {",
							"    pm.expect(tv4.validate(jsonData, schema, true, true), tv4.error).to.be.true;",
							"});",
							"",
							"console.log(\"Errors: \", tv4.error);",
							"",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var weight_req = request.data.weight;",
							"var weight_res = jsonData;",
							"console.log(weight_req)",
							"console.log(weight_res)",
							"",
							"pm.test(\"3.1. Correct weight: daily_food = weight * 0.012\", function() {",
							"    pm.expect(parseFloat(weight_res.daily_food)).to.eql(parseFloat(weight_req * 0.012));",
							"});",
							"",
							"pm.test(\"3.2. Correct weight: daily_sleep = weight * 2.5\", function() {",
							"    pm.expect(parseFloat(weight_res.daily_sleep)).to.eql(parseFloat(weight_req * 2.5));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "40",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olesa",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user",
							"// req.",
							"// POST",
							"// age: int",
							"// salary: int",
							"// name: str",
							"// auth_token",
							"",
							"// Resp.",
							"// {'name': name,",
							"//  'age':age,",
							"//  'salary': salary,",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],",
							"//  'u_salary_1.5_year': salary * 4}",
							"//   }",
							"",
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"1. Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"    \"age\",",
							"    \"name\",",
							"    \"salary\",",
							"    \"family\"",
							"  ],",
							"  \"properties\": {",
							"    \"age\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"salary\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"family\": {",
							"        \"type\": \"object\",",
							"        \"required\": [",
							"        \"children\",",
							"        \"u_salary_1_5_year\"",
							"      ],",
							"      \"properties\": {",
							"        \"children\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            },",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            }",
							"          ]",
							"        },",
							"        \"u_salary_1_5_year\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"    }",
							"  },",
							"}",
							"",
							"var jsonData = pm.response.json();",
							"// pm.test(\"2. Schema is correct\", function() {",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"// });",
							"",
							"// var jsonData = JSON.parse(responseBody);",
							"pm.test(\"2. Response body is valid\", function() {",
							"    pm.expect(tv4.validate(jsonData, schema, true, true), tv4.error).to.be.true;",
							"});",
							"",
							"console.log(\"Errors: \", tv4.error);",
							"",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения",
							"var name_req = request.data.name",
							"var name_res = pm.response.json().name",
							"console.log(\"name_req = \", name_req, \"name_res = \", name_res)",
							"pm.test(\"3. Correct name: name request = name response.\", function() {",
							"    pm.expect(name_req).to.eql(name_res);",
							"});",
							"",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"var age_req = request.data.age",
							"var age_res = pm.response.json().age",
							"console.log(\"age_req = \", age_req, \"age_res = \", age_res)",
							"pm.test(\"4. Correct age: age request = age response.\", function() {",
							"    pm.expect(parseInt(age_req)).to.eql(parseInt(age_res));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Olesa",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency",
							"// req.",
							"// POST",
							"// auth_token",
							"",
							"// Resp. Передаётся список массив объектов.",
							"// [",
							"// {\"Cur_Abbreviation\": str,",
							"//  \"Cur_ID\": int,",
							"//  \"Cur_Name\": str",
							"// }",
							"// …",
							"// {\"Cur_Abbreviation\": str,",
							"//  \"Cur_ID\": int,",
							"//  \"Cur_Name\": str",
							"// }",
							"// ]",
							"",
							"// Тесты:",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.",
							"var arData = pm.response.json()",
							"console.log(arData)",
							"",
							"var randomItem = arData[Math.floor(Math.random()*arData.length)];",
							"console.log(randomItem)",
							"",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"var Cur_ID = randomItem.Cur_ID",
							"console.log(Cur_ID)",
							"pm.environment.set(\"Cur_ID\", Cur_ID);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/curr_byn",
							"// req.",
							"// POST",
							"// auth_token",
							"// curr_code: int",
							"",
							"// Resp.",
							"// {",
							"//     \"Cur_Abbreviation\": str",
							"//     \"Cur_ID\": int,",
							"//     \"Cur_Name\": str,",
							"//     \"Cur_OfficialRate\": float,",
							"//     \"Cur_Scale\": int,",
							"//     \"Date\": str",
							"// }",
							"",
							"// Тесты:",
							"// 1) Статус код 200",
							"pm.test(\"1. Status code is 200.\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"",
							"const schema = {",
							"  \"type\": \"object\",",
							"    \"required\": [",
							"    \"Cur_Abbreviation\",",
							"    \"Cur_ID\",",
							"    \"Cur_Name\",",
							"    \"Cur_OfficialRate\",",
							"    \"Cur_Scale\",",
							"    \"Date\"",
							"  ],",
							"  \"properties\": {",
							"    \"Cur_Abbreviation\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_ID\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Cur_Name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_OfficialRate\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"Cur_Scale\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Date\": {",
							"      \"type\": \"string\"",
							"    }",
							"  }",
							"};",
							"",
							"// var schema = JSON.parse(schema);",
							"var jsonData = pm.response.json();",
							"// pm.test(\"2. Schema is correct\", function() {",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"// });",
							"",
							"// var jsonData = JSON.parse(responseBody);",
							"pm.test(\"2. Response body is valid\", function() {",
							"    pm.expect(tv4.validate(jsonData, schema, true, true), tv4.error).to.be.true;",
							"});",
							"",
							"// если JSON.parse(pm.environment.get('schema')) то ошибка: jsonerror unexpected token u in json at position 0",
							"// если JSON.parse(schema) то ошибка: JSONError: Unexpected token 'o' at 1:2 [object Object] ^",
							"// если JSON.parse('schema') то ошибка: JSONError: Unexpected token 's' at 1:1 schema ^",
							"",
							"console.log(\"Errors: \", tv4.error);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "451",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "8 currency ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/curr_byn",
							"// req.",
							"// POST",
							"// auth_token",
							"// curr_code: int",
							"",
							"// const xhr = new XMLHttpRequest();",
							"// xhr.open(\"POST\", 'http://162.55.220.72:5005/currency', true);",
							"// xhr.send()",
							"// 1) получить список валют",
							"var jsonData = pm.response.json();",
							"// 2) итерировать список валют",
							"jsonData.forEach(function(item) {",
							"// достать вэлью из статус кода 200 или 500",
							"    console.log(item[\"Cur_ID\"]);",
							"});",
							"",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты",
							"// 4) если возвращается 500 код, переходим к следующей итреации",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response",
							"// {",
							"//     \"Cur_Abbreviation\": str",
							"//     \"Cur_ID\": int,",
							"//     \"Cur_Name\": str,",
							"//     \"Cur_OfficialRate\": float,",
							"//     \"Cur_Scale\": int,",
							"//     \"Date\": str",
							"// }",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}