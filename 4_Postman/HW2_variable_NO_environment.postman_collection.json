{
	"info": {
		"_postman_id": "6f37e96d-6682-44cd-a509-fc7d78830f12",
		"name": "HW2_variable_NO_environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 First",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Correct Body\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"",
							"// 2. Статус код 200",
							"pm.test(\"2. Status code is 200.\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в JSON (в консоль?)",
							"var BodyAsJSON = pm.response.json();",
							"console.log(\"response = \", BodyAsJSON)",
							"",
							"// 4. Name  в ответе равно name s request (ручками)",
							"pm.test(\"4. Correct name.\", function () {",
							"    var jsonName = pm.response.json();",
							"    pm.expect(jsonName.name).to.eql(\"Olesa\");",
							"});",
							"",
							"// 5. Age  в ответе равно age s request (ручками)",
							"pm.test(\"5. Correct age.\", function () {",
							"    var jsonAge = pm.response.json();",
							"    pm.expect(parseInt(jsonAge.age)).to.eql(24);",
							"});",
							"",
							"// 6. Salary  в ответе равно salary s request (ручками)",
							"pm.test(\"6. Correct salary.\", function () {",
							"    var jsonSalary = pm.response.json();",
							"    pm.expect(jsonSalary.salary).to.eql(1000);",
							"});",
							"",
							"// 7. Спарсить request (в консоль?)",
							"var RequestAsJSON = request.data;",
							"console.log(\"request = \", RequestAsJSON);",
							"",
							"// 8. Name в ответе равно name s request",
							"pm.test(\"8. Correct name = request.\", function () {",
							"    var jsonName = pm.response.json();",
							"    pm.expect(jsonName.name).to.eql(RequestAsJSON.name);",
							"});",
							"",
							"// 9. Age в ответе равно age s request",
							"pm.test(\"9. Correct age = request.\", function () {",
							"    var jsonAge = pm.response.json();",
							"    pm.expect(parseInt(jsonAge.age)).to.eql(parseInt(RequestAsJSON.age));",
							"});",
							"",
							"// 10. Salary в ответе равно salary s request",
							"pm.test(\"10. Correct salary = request.\", function () {",
							"    var jsonSalary = pm.response.json();",
							"    pm.expect(parseInt(jsonSalary.salary)).to.eql(parseInt(RequestAsJSON.salary));",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"var FamilyAsJSON = pm.response.json().family;",
							"console.log(\"family = \", FamilyAsJSON)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"12. Correct u_salary_1_5_year.\", function () {",
							"    var jsonSalary_1_5 = pm.response.json().family;",
							"    pm.expect(jsonSalary_1_5.u_salary_1_5_year).to.eql(parseInt(request.data.salary)*4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olesa",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"",
							"// 2. Статус код 200",
							"pm.test(\"2. Status code is 200.\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить (ответ) response body в json.",
							"var BodyAsJSON = pm.response.json();",
							"console.log(\"response = \", BodyAsJSON);",
							"",
							"// 4. Спарсить (запрос) request.",
							"var RequestAsJSON = pm.request.url.query.toObject();",
							"console.log(\"request = \", RequestAsJSON);",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"5. Correct name = request.\", function () {",
							"    var jsonName = pm.response.json();",
							"    pm.expect(jsonName.name).to.eql(RequestAsJSON.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"6. Correct age = request.\", function () {",
							"    var jsonAge = pm.response.json();",
							"    pm.expect(parseInt(jsonAge.age)).to.eql(parseInt(RequestAsJSON.age));",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"7. Correct salary = request.\", function () {",
							"    var jsonSalary = pm.response.json();",
							"    pm.expect(parseInt(jsonSalary.salary)).to.eql(parseInt(RequestAsJSON.salary));",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"var FamilyAsJSON = pm.response.json().family;",
							"console.log(\"family = \", FamilyAsJSON);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"9. Dog has name\", function () {",
							"    pm.expect(FamilyAsJSON.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"10. Dog has age\", function() {",
							"    pm.expect(FamilyAsJSON.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"11. Dog name is Luky\", function() {",
							"    var JsonDogName = pm.response.json().family.pets.dog;",
							"    pm.expect(JsonDogName.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"12. Dog age = 4\", function() {",
							"    var JsonDogAge = pm.response.json().family.pets.dog;",
							"    pm.expect(parseInt(JsonDogAge.age)).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olesa&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olesa"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4 Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"",
							"// 2. Статус код 200",
							"pm.test(\"2. Status code is 200.\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"var BodyAsJSON = JSON.parse(responseBody);",
							"console.log(\"response = \", BodyAsJSON);",
							"",
							"// 4. Спарсить request.",
							"var RequestAsJSON = pm.request.url.query.toObject();",
							"console.log(\"request = \", RequestAsJSON);",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"5. Correct name response = request.\", function() {",
							"    var jsonName = pm.response.json();",
							"    pm.expect(jsonName.name).to.eql(RequestAsJSON.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"6. Correct age response = request.\", function() {",
							"    var jsonAge = pm.response.json();",
							"    pm.expect(parseInt(jsonAge.age)).to.eql(parseInt(RequestAsJSON.age));",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"var SalaryAsJSON_req = pm.request.url.query.toObject().salary;",
							"console.log(\"salary_req = \", SalaryAsJSON_req);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"var SalaryAsJSON_res = JSON.parse(responseBody).salary;",
							"console.log(\"salary_res = \", SalaryAsJSON_res);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"salary_res_0 = \", SalaryAsJSON_res[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary_res_1 = \", SalaryAsJSON_res[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary_res_2 = \", SalaryAsJSON_res[2]);",
							"",
							"",
							"var jsonSalary = pm.response.json();",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"12. Correct salary[0] = request salary.\", function () {",
							"    pm.expect(parseInt(jsonSalary.salary)).to.eql(parseInt(SalaryAsJSON_res[0]));",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"13. Correct salary[1] = request salary * 2.\", function () {",
							"    pm.expect(parseInt(jsonSalary.salary)*2).to.eql(parseInt(SalaryAsJSON_res[1]));",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"14. Correct salary[2] = request salary * 3.\", function () {",
							"    pm.expect(parseInt(jsonSalary.salary)*3).to.eql(parseInt(SalaryAsJSON_res[2]));",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"name = RequestAsJSON.name;",
							"pm.environment.get(\"name\");",
							"console.log(\"name = \" + name);",
							"",
							"// 16. Создать в окружении переменную age",
							"age = RequestAsJSON.age;",
							"pm.environment.get(\"age\");",
							"console.log(\"age = \" + age);",
							"",
							"// 17. Создать в окружении переменную salary",
							"salary = RequestAsJSON.salary;",
							"pm.environment.get(\"salary\");",
							"console.log(\"salary = \" + salary);",
							"",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", name);",
							"",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"// var SalaryAsJSON_res = JSON.parse(responseBody).salary;",
							"var salary_len = SalaryAsJSON_res.length",
							"",
							"for (var i=0; i < salary_len; i++) {",
							"    console.log(\"Salary_\" + i + \": \" + parseInt(SalaryAsJSON_res[i]));",
							"};",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olesa&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olesa"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5 User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request (ручками)",
							"console.log(pm.environment.get(\"salary\")); // проверяем",
							"",
							"// 2. Вставить параметр age из окружения в age (ручками)",
							"console.log(pm.environment.get(\"age\")); // проверяем",
							"",
							"// 3. Вставить параметр name из окружения в name (ручками)",
							"console.log(pm.environment.get(\"name\")); // проверяем",
							"",
							"// 4. Отправить запрос.",
							"",
							"// 5. Статус код 200",
							"pm.test(\"5. Status code is 200.\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"var BodyAsJSON = pm.response.json();",
							"console.log(\"response = \", BodyAsJSON);",
							"",
							"// 7. Спарсить request.",
							"var RequestAsJSON = request.data;",
							"console.log(\"request = \", RequestAsJSON);",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"8. JSON response has start_qa_salary\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"9. JSON response has qa_salary_after_6_months\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"10. JSON response has qa_salary_after_12_months\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"11. JSON response has qa_salary_after_1.5_year.\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"12. JSON response has qa_salary_after_3.5_years.\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"13. JSON response has person.\", function () {",
							"    pm.expect(BodyAsJSON).to.have.property(\"person\");",
							"});",
							"",
							"var jsonSalary = pm.response.json();",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"14. Correct start_qa_salary response = salary request.\", function() {",
							"    pm.expect(parseInt(jsonSalary.start_qa_salary)).to.eql(parseInt(RequestAsJSON.salary));",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"15. Correct qa_salary_after_6_months response = salary*2 request.\", function() {",
							"    pm.expect(parseInt(jsonSalary.qa_salary_after_6_months)).to.eql(parseInt(RequestAsJSON.salary)*2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"16. Correct qa_salary_after_12_months response = salary*2.7 request.\", function() {",
							"    pm.expect(parseInt(jsonSalary.qa_salary_after_12_months)).to.eql(parseInt(RequestAsJSON.salary)*2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"17. Correct qa_salary_after_1.5_year response = salary*3.3 request.\", function() {",
							"    pm.expect(parseInt(jsonSalary[\"qa_salary_after_1.5_year\"])).to.eql(parseInt(RequestAsJSON.salary)*3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"18. Correct qa_salary_after_3.5_years response = salary*3.8 request.\", function() {",
							"    pm.expect(parseInt(jsonSalary[\"qa_salary_after_3.5_years\"])).to.eql(parseInt(RequestAsJSON.salary)*3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"19. Correct u_name[1] = request salary.\", function () {",
							"    pm.expect(parseInt(jsonSalary.salary)).to.eql(parseInt(\"u_name\"[1]));",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"20. Correct u_age = request age.\", function () {",
							"    pm.expect(parseInt(jsonSalary.age)).to.eql(parseInt(\"u_age\"));",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"21. Correct u_salary_5_years = request salary*4.2.\", function () {",
							"    pm.expect(parseInt(jsonSalary.salary)*4.2).to.eql(parseInt(\"u_salary_5_years\"));",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"var personJSON = JSON.parse(responseBody).person;",
							"",
							"_.each(personJSON, function(value, key) {",
							"    console.log(key + \": \", value);",
							"    // var u_name_for = personJSON.u_name;",
							"    // for(i=0; i < u_name_for.length; i++) {",
							"    //     console.log(\"u_name_elem\" + i + \": \" + u_name_for[i]);",
							"    // };",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}